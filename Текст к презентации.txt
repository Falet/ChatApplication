В течении 1,5 месяцев велась разработка клиент-серверного приложения.

Задачи поставленные на этот период представлены на слайде. Т.е. у клиента должен быть реализован интерфейс взаимодействия и бизнес-логика поддерживающая работу с сервером.
У сервера реализует хранение данных пользователей, чатов и сообщений и их связей. Также обеспечивает доступ к этим данным.

На данном слайде представлена диаграмма компонентов. NetworkServer занимается инициализации начальных данных и создания классов для работы программы.
WsConnection отвечат за подключение клиента, за упаковку и отправку пакетов. Интерфейс ITransport реализует класс WsServer, отвечающий за управление коллекции WsConnection.
HandlerRequest определяет какой пакет пришел и вызвает соответствуеющие событие. HandlerConnection, HandlerChat и HandlerMessage отвечают за подключения, 
работу с чатами и работу с сообщениями соотвественно. 

На данном слайде похожая структура только работы с сервером, есть ITransport, HandlerResponse, HandlerConnection,HandlerChat и handlerMessage также как и на сервере.

классы VM соотвествуют Вью, Логин меню, контрол меню всей программы, вью чата и списков доступных пользователей, создание чата.

Почти в каждом Request лишь имя пользователя который запрашивает информацию, в Response содержиться ответ клиент, 
InfoAboutAllClientsResponse список доступных пользователей и их активность. NumbersAccessibleChatsResponse список доступных чатов. 

Успешно реализована большая часть функционала, за исключением логирования и некоторых опциональных функций.​

Работа сервера происходит асинхронно, для большей отзывчивости содержит массивы, содержащие основную информацию для оперативной работы.

На клиенте применен паттерн mvvm.


Сложностей как таковых небыло. Просто разработка происходила медленнее из-за поиска оптимального пути решения задачи. Логирование было оставлено на последную часть, 
но в коде заглушек для ее реализации.